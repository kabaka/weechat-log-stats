#!/usr/bin/env ruby
#
# Copyright (C) 2012 Kyle Johnson <kyle@vacantminded.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

abort "Requires Ruby 1.9" unless RUBY_VERSION.start_with? "1.9"

require 'optparse'
#require 'weechat-log-stats'
load 'lib/weechat-log-stats.rb'

files, options = [], {:output_dir => "./output/",
                      :message_threshold => 500,
                      :top_word_length => 6,
                      :top_word_count => 10,
                      :nicks_file => File.expand_path("~/.weechat-log-stats.nicks")}

WIDTH = `tput cols`.chomp.to_i

def write_progress_bar(label, progress)
  width = WIDTH - 9 - label.length

  print "\r%s: %3d%% [%s]" % [label, progress * 100, ("#" * ((width) * progress)).ljust(width)]
end

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"

  opts.on("-o", "--output-dir DIR", "Output directory") do |d|
    options[:output_dir] = d
  end

  opts.on("-t", "--message-threshold N", Integer, "Minimum message count for inclusion in output") do |i|
    options[:message_threshold] = i
  end

  opts.on("--top-word-length N", Integer, "Minimum length for words shown in top words.") do |i|
    options[:top_word_length] = i
  end

  opts.on("--top-word-count N", Integer, "Number of words shown in the top words.") do |i|
    options[:top_word_count] = i
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end.parse!

abort "No input files specified." if ARGV.empty?

trap("INT")  { IRCStats.clean; exit! }
trap("TERM") { IRCStats.clean; exit! }

at_exit { IRCStats.clean }

NICK_CHECKS = []
Check = Struct.new(:nick, :str, :glob)

if File.exists? options[:nicks_file]
  File.open(options[:nicks_file], "r") do |file|
    while line = file.gets do
      line = line.force_encoding("ASCII-8BIT").chomp.downcase

      next if line.empty? or line[0] == '#'

      nick, checks = line.split(/\s*=\s*/, 2)

      checks.split(/\s+/).each do |check|
          NICK_CHECKS << Check.new(nick, check, check.include?('*'))
      end
    end
  end
end

until ARGV.empty?
  file = ARGV.shift

  begin
    IRCStats.run(file, options)
  rescue Exception => e
    puts "Error on #{file}: #{e}"
    puts e.backtrace
  end
end

